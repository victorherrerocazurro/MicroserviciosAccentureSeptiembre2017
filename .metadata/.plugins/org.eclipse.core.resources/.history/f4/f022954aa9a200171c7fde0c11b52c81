package com.accenture.holamundospringbootweb.controllers;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.accenture.holamundospringbootweb.recursos.Libro;

@RestController
@RequestMapping("/Libros")
public class LibrosController {

	@RequestMapping(path = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public Libro getLibroById(@PathVariable long id) {

		// Debemos invocar el servicio
		// Libro libro = servicio.getLibroById(id);

		Libro libro = new Libro(id, "El Juego de Ender");

		return libro;
	}

	@RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Libro>> getLibrosByTitulo(@RequestParam(name="title") String titulo) {
		
		
		
	}
	
	@RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> postLibro(@RequestBody Libro libro) {

		try {
			// Debemos invocar el servicio
			// long id = servicio.guardarLibro(libro);

			long id = 258965;

			HttpHeaders headers = new HttpHeaders();

			headers.setLocation(new URI("http://localhost:8280/Libros/" + id));

			HttpStatus status = HttpStatus.CREATED;

			return new ResponseEntity<>(headers, status);

		} catch (URISyntaxException e) {
			e.printStackTrace();

			HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;

			return new ResponseEntity<>(status);
		}

	}

	@RequestMapping(method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> putLibro(@RequestBody Libro libro) {

		// int numeroRegistrosModificados = servicio.modificarLibroById(libro.getId(),
		// libro);

		int numeroRegistrosModificados = 1;

		if (numeroRegistrosModificados == 1) {
			HttpStatus status = HttpStatus.OK;

			return new ResponseEntity<>(status);
		} else {
			HttpStatus status = HttpStatus.NOT_MODIFIED;

			return new ResponseEntity<>(status);
		}
	}

	@RequestMapping(path = "/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Void> deleteLibroById(@PathVariable long id) {
		// int numeroRegistrosBorrados = servicio.borrarLibroById(id);

		int numeroRegistrosBorrados = 1;

		if (numeroRegistrosBorrados == 1) {
			HttpStatus status = HttpStatus.OK;

			return new ResponseEntity<>(status);
		} else {
			HttpStatus status = HttpStatus.NOT_MODIFIED;

			return new ResponseEntity<>(status);
		}
	}

}
